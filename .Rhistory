source("tokens.R")
library(e1071)
library(caTools)
library(class)
test <- na.omit(read.csv("test.csv", encoding = "UTF-8"))
train <- na.omit(read.csv("train.csv", encoding = "UTF-8"))
popularity <- c()
counter <- 1
countries <- c("Poland","USA","Brazil","Japan","South Korea","Australia", "France", "switzerland", "Italy")
get_playlist_top_50_spotify <- function(countries){
playlists_ids <- c()
all_playlists <- list()
for(country in countries){
phrase = sprintf("Top 50 - %s",country)
playlist = search_spotify(phrase, type ="playlist", limit = 10)
playlist = playlist[playlist$owner.display_name == "Spotify",]
playlist = playlist[1,]
playlists_ids <- append(playlists_ids, playlist$id)
}
for(id in playlists_ids){
tracks <- get_playlist(id)$tracks$items
tracks_artist <- tracks$track.artist
artist <- c()
artist_id <- c()
for(artist_data in tracks_artist){
artist <- append(artist, artist_data$name[1])
artist_id <- append(artist_id, artist_data$id[1])
}
artist_genres <- c()
for(id in artist_id){
if(!is.list(get_artist(id)$genres[1])){
artist_genres <- append(artist_genres,get_artist(id)$genres[1])
}
else{
artist_genres <- append(artist_genres, "other")
}
}
audio_features <- data.frame()
for(id in tracks$track.id){
audio = get_track_audio_features(id)[c(1,2,3,4,6,7,9,10,11)]
audio_features <- rbind(audio_features,audio)
}
artist_genres <- unlist(artist_genres)
topsongs <- data.frame(
artist,
artist_genres,
tracks$track.name,
artist_id,
tracks$track.id,
tracks$track.popularity
)
topsongs <- cbind(topsongs,audio_features)
topsongs <- unique(topsongs)
all_playlists <- append(all_playlists, list(topsongs))
}
return(all_playlists)
}
x <- get_playlist_top_50_spotify(countries = countries)
x
View(x)
unlist(x)
View(train)
length(x)
own_data <- data.frame()
for(i in length(x)){
own_data <- rbind(own_data,x[[i]])
}
View(own_data)
for(i in c(1:length(x))){
own_data <- rbind(own_data,x[[i]])
}
View(own_data)
knn_own_data <- own_data[c(2,c(7:15))]
View(knn_own_data)
split <- sample.split(knn_own_data, SplitRatio = 0.7)
train <- subset(knn_own_data, split == "TRUE")
train_own <- subset(knn_own_data, split == "TRUE")
test_own <- subset(knn_own_data, split == "FALSE")
classifier <- knn(train = train_own, test = test_own, cl = train_own$artist_genres, k=1)
View(test_own)
View(test_own)
classifier <- knn(train = train_own, test = test_own, cl = train_own$artist_genres, k=1)
classifier <- knn(train = train_own, test = test_own, cl = train_own$artist_genres, k=1)
classifier <- knn(train = train_own, test = test_own, cl = train_own$artist_genres, k=1)
classifier <- knn(train = train_own, test = test_own, cl = test_own$artist_genres, k=1)
classifier <- knn(train = train_own, test = test_own, cl = train_own$artist_genres, k=1)
View(own_data)
knn_own_data <- own_data[c(2,7,8,c(10:15))]
split <- sample.split(knn_own_data, SplitRatio = 0.7)
train_own <- subset(knn_own_data, split == "TRUE")
test_own <- subset(knn_own_data, split == "FALSE")
classifier <- knn(train = train_own, test = test_own, cl = train_own$artist_genres, k=1)
View(knn_own_data)
classifier <- knn(train = train_own, test = test_own, cl = train_own$artist_genres, k=1)
sapply(knn_own_data[2:9], function(e){e*100})
knn_own_data[2:9] <- sapply(knn_own_data[2:9], function(e){e*100})
View(knn_own_data)
split <- sample.split(knn_own_data, SplitRatio = 0.7)
train_own <- subset(knn_own_data, split == "TRUE")
test_own <- subset(knn_own_data, split == "FALSE")
classifier <- knn(train = train_own, test = test_own, cl = train_own$artist_genres, k=1)
own_data <- data.frame()
for(i in c(1:length(x))){
own_data <- rbind(own_data,x[[i]])
}
knn_own_data <- own_data[c(2,7,8,c(10:15))]
split <- sample.split(knn_own_data, SplitRatio = 0.7)
train_own <- subset(knn_own_data, split == "TRUE")
test_own <- subset(knn_own_data, split == "FALSE")
train.scale <- scale(train_own[,2:9])
test.scale <- scale(test_own[,2:9])
classifier <- knn(train = train.scale, test = test.scale, cl = train_own$artist_genres, k=1)
miss <- mean(classifier != train_own$artist_genres)
View(train_own)
"hip hop" %in% "deep underground hip hop"
classifier <- knn(train = train.scale, test = test.scale, cl = train_own$artist_genres, k=3)
miss <- mean(classifier != train_own$artist_genres)
classifier <- knn(train = train.scale, test = test.scale, cl = train_own$artist_genres, k=5)
miss <- mean(classifier != train_own$artist_genres)
levels(knn_own_data$artist_genres)
factor(knn_own_data$artist_genres)
knn_own_data <- factor(knn_own_data$artist_genres)
levels(knn_own_data$artist_genres)
levels(knn_own_data)
own_data <- data.frame()
for(i in c(1:length(x))){
own_data <- rbind(own_data,x[[i]])
}
knn_own_data <- own_data[c(2,7,8,c(10:15))]
split <- sample.split(knn_own_data, SplitRatio = 0.7)
train_own <- subset(knn_own_data, split == "TRUE")
test_own <- subset(knn_own_data, split == "FALSE")
train.scale <- scale(train_own[,2:9])
test.scale <- scale(test_own[,2:9])
classifier <- knn(train = train.scale, test = test.scale, cl = train_own$artist_genres, k=5)
miss <- mean(classifier != train_own$artist_genres)
knn_own_data$artist_genres <- factor(knn_own_data$artist_genres)
levels(knn_own_data)
levels(knn_own_data$artist_genres)
lvl <- levels(knn_own_data$artist_genres)
library(stringi)
stri_extract_all_regex(lvl,".*hip hop")
stri_detect_regex(lvl,".*hip hop")
hiphop <- stri_detect_regex(lvl,".*hip hop")
subset(lvl, hiphop==T)
miss <- mean(classifier != train_own$artist_genres)
pop_test_scale <- scale(test_own[,1:44])
pop_test_scale <- scale(test_100[,1:44])
test_100 <- cbind(test[1:100,c(9:44)],popularity)
source("tokens.R")
library(e1071)
library(caTools)
library(class)
library(stringi)
test <- na.omit(read.csv("test.csv", encoding = "UTF-8"))
train <- na.omit(read.csv("train.csv", encoding = "UTF-8"))
popularity <- c()
counter <- 1
for(i in c(1:100)){
al <- search_spotify(test$name[i],type = "album", limit = 1)
if(length(al) != 0 | "id" %in% colnames(al) | !is.null(al$id)){
data <- get_album(al$id)$popularity
}
else{
data <- 0
}
ar <- search_spotify(test$artists[1],type = "artist", limit = 1)
popularity <- append(popularity, mean(data,ar$popularity))
print(counter)
print(al$id)
counter <- counter+1
}
test_100 <- cbind(test[1:100,c(9:44)],popularity)
train_800 <- cbind(train[,c(9:44)],popularity = train$popularity)
pop_test_scale <- scale(test_100[,1:44])
pop_test_scale <- scale(test_100[,1:36])
pop_train_scale <- scale(train_800[,1:36])
classi <- knn(train = pop_train_scale,test = pop_test_scale, cl=train_800$popularity, k = i)
miss_class <- mean(classi != test_100$popularity)
print(paste('Accuracy=',1-miss_class))
classi <- knn(train = pop_train_scale,test = pop_test_scale, cl=train_800$popularity, k = 1)
miss_class <- mean(classi != test_100$popularity)
print(paste('Accuracy=',1-miss_class))
classi <- knn(train = pop_train_scale,test = pop_test_scale, cl=train_800$popularity, k = 3)
miss_class <- mean(classi != test_100$popularity)
print(paste('Accuracy=',1-miss_class))
own_data <- data.frame()
for(i in c(1:length(x))){
own_data <- rbind(own_data,x[[i]])
}
knn_own_data <- own_data[c(2,7,8,c(10:15))]
split <- sample.split(knn_own_data, SplitRatio = 0.7)
train_own <- subset(knn_own_data, split == "TRUE")
test_own <- subset(knn_own_data, split == "FALSE")
train.scale <- scale(train_own[,2:9])
test.scale <- scale(test_own[,2:9])
classifier <- knn(train = train.scale, test = test.scale, cl = train_own$artist_genres, k=5)
miss <- mean(classifier != train_own$artist_genres)
View(knn_own_data)
get_spotify_charts_data
get_spotify_charts_data <- function(
region = c("global","pl","de","ua","us","sk"),
timestamp = c("daily", "weekly"),
date = "latest"
)
{
#Webscraping ze strony spotifyCharts
link <- sprintf("https://spotifycharts.com/regional/%s/%s/%s",
region,timestamp,date)
spotify_html <- html_elements(read_html(link), xpath =
"/html/body/div/div/div/div/span/table")
spotify_table <- html_table(read_html(link))
spotify_df <- as.data.frame(spotify_table)
spotify_df <- spotify_df[c(2,4,5)]
#Odzielenie artystow od tytulow piosenek
title <- c()
artist <- c()
streams <- as.numeric(stri_replace_all_fixed(spotify_df$Streams,",",""))
splited <- strsplit(spotify_df$Track, "\n")
for(i in c(1:200)){
title <- append(title, splited[[i]][1])
list_of_song_artist <- substring(unlist(stri_extract_all_regex(
splited[[i]][2],"(by {1}.*)")), 4)
artist <- append(artist, list_of_song_artist)
}
#koncowa ramka
data.frame(title, artist, streams)
}
library(spotifyr)
library(rvest)
library(stringi)
source("tokens.R")
# funkcja zwracajaca dane z playlist
get_playlist_top_50_spotify <- function(countries){
playlists_ids <- c()
all_playlists <- list()
for(country in countries){
phrase = sprintf("Top 50 - %s",country)
playlist = search_spotify(phrase, type ="playlist", limit = 10)
playlist = playlist[playlist$owner.display_name == "Spotify",]
playlist = playlist[1,]
playlists_ids <- append(playlists_ids, playlist$id)
}
for(id in playlists_ids){
tracks <- get_playlist(id)$tracks$items
tracks_artist <- tracks$track.artist
artist <- c()
artist_id <- c()
for(artist_data in tracks_artist){
artist <- append(artist, artist_data$name[1])
artist_id <- append(artist_id, artist_data$id[1])
}
artist_genres <- c()
for(id in artist_id){
if(!is.list(get_artist(id)$genres[1])){
artist_genres <- append(artist_genres,get_artist(id)$genres[1])
}
else{
artist_genres <- append(artist_genres, "other")
}
}
audio_features <- data.frame()
for(id in tracks$track.id){
audio = get_track_audio_features(id)[c(1,2,3,4,6,7,9,10,11)]
audio_features <- rbind(audio_features,audio)
}
artist_genres <- unlist(artist_genres)
topsongs <- data.frame(
artist,
artist_genres,
tracks$track.name,
artist_id,
tracks$track.id,
tracks$track.popularity
)
topsongs <- cbind(topsongs,audio_features)
topsongs <- unique(topsongs)
all_playlists <- append(all_playlists, list(topsongs))
}
return(all_playlists)
}
# funkcja zwracajaca dane z chartow
get_spotify_charts_data <- function(
region = c("global","pl","de","ua","us","sk"),
timestamp = c("daily", "weekly"),
date = "latest"
)
{
#Webscraping ze strony spotifyCharts
link <- sprintf("https://spotifycharts.com/regional/%s/%s/%s",
region,timestamp,date)
spotify_html <- html_elements(read_html(link), xpath =
"/html/body/div/div/div/div/span/table")
spotify_table <- html_table(read_html(link))
spotify_df <- as.data.frame(spotify_table)
spotify_df <- spotify_df[c(2,4,5)]
#Odzielenie artystow od tytulow piosenek
title <- c()
artist <- c()
streams <- as.numeric(stri_replace_all_fixed(spotify_df$Streams,",",""))
splited <- strsplit(spotify_df$Track, "\n")
for(i in c(1:200)){
title <- append(title, splited[[i]][1])
list_of_song_artist <- substring(unlist(stri_extract_all_regex(
splited[[i]][2],"(by {1}.*)")), 4)
artist <- append(artist, list_of_song_artist)
}
#koncowa ramka
data.frame(title, artist, streams)
}
# funkcja zwracajaca dane top artystow (dziala tylko pl)
artist_data <- function(region, from_date, to_date){
y_weeks <- seq(as.Date(from_date), as.Date(to_date), by="weeks")
artist_trought_time <- c()
for(el in by_weeks){
spo <- get_spotify_charts_data(region = region, timestamp = "daily", date = as.character(as.Date(el, origin = "1970-01-01")))
artist_trought_time <- append(artist_trought_time, unique(unlist(strsplit(spo$artist, ", "))))
}
artist_trought_time <- sort(unique(artist_trought_time))
genres_df <- spotifyr::search_spotify(artist_trought_time[1], type = "artist", market=region, limit = 1)[c(5,3,1,6)]
for(i in 2:length(artist_trought_time)){
x <- spotifyr::search_spotify(artist_trought_time[i], type = "artist", market=region, limit = 1)[c(5,3,1,6)]
genres_df <- rbind(genres_df,x)
}
for(i in 1:length(genres_df$genres)){
if(is.vector(genres_df$genres[[i]])){
genres_df$genres[[i]] <- paste(genres_df$genres[[i]], collapse = ", ")
}
}
genres_df$genres <- unlist(unlist(genres_df$genres))
genres_df[genres_df==""]<-NA
genres_df <- na.omit(genres_df)
genres_df
}
# funkcja zwracajaca dane top artystow z kraju sprawdzanego (dziala tylko pl)
regional_artist_data <- function(region,language){
genres_df <- artist_data(region)
regional_genres_df <- genres_df[grep(language,genres_df$genres),]
regional_genres_df <- regional_genres_df[order(regional_genres_df$popularity, decreasing = T),]
regional_genres_df
}
classifier <- knn(train = train.scale, test = test.scale, cl = train_own$artist_genres, k=5)
source("tokens.R")
source("functions.R")
